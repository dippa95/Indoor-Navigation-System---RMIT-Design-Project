#include<Wire.h>
//#include<math.h>
//#include <MPU6050_6Axis_MotionApps20.h>
//#include <helper_3dmath.h>
#include <SPI.h>
#include <SD.h>
#include <LiquidCrystal.h>
#include <I2Cdev.h>


const int MPU_addr=0x68;
double AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ; 
uint32_t timer;



void setup() {
  // put your setup code here, to run once:

 Wire.begin();
  #if ARDUINO >= 157
  Wire.setClock(400000UL); // Set I2C frequency to 400kHz
  #else
    TWBR = ((F_CPU / 400000UL) - 16) / 2; // Set I2C frequency to 400kHz
  #endif
  
Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
  //Serial.begin(115200);
 // Serial.begin(1000000);
    Serial.begin(9600);

  //1) collect the data
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
  AcX=Wire.read()<<8|Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)     
  AcY=Wire.read()<<8|Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ=Wire.read()<<8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  Tmp=Wire.read()<<8|Wire.read();  // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  GyX=Wire.read()<<8|Wire.read();  // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyY=Wire.read()<<8|Wire.read();  // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyZ=Wire.read()<<8|Wire.read();  // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)

timer = micros();

Serial.print("AcX");Serial.print("\t");
Serial.print("AcY");Serial.print("\t");
Serial.print("AcZ");Serial.print("\t");Serial.print("\t");
Serial.print("GyX");Serial.print("\t");
Serial.print("GyY");Serial.print("\t");
Serial.print("GyZ");Serial.print("\t");

}

void loop() {
  // put your main code here, to run repeatedly:
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
  AcX=Wire.read()<<8|Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)     
  AcY=Wire.read()<<8|Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ=Wire.read()<<8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  Tmp=Wire.read()<<8|Wire.read();  // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  GyX=Wire.read()<<8|Wire.read();  // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyY=Wire.read()<<8|Wire.read();  // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyZ=Wire.read()<<8|Wire.read();  // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
  
  double dt = (double)(micros() - timer) / 1000000;


    Serial.print(AcX);
    Serial.print("\t\t");
//    myFile.print(ax));
//    myFile.print("\t\t");  
    Serial.print(AcY);
    Serial.print("\t\t");
//    myFile.print(ay);
//    myFile.print("\t\t\t");
    Serial.print(AcZ);
    Serial.print("\t\t\t\t\t");
//    myFile.println(az);
//    myFile.print("\t\t");
//Serial.print(Tmp);
//Serial.print("\t\t");
    Serial.print(GyX);
    Serial.print("\t\t");
//    myFile.print(gx));
//    myFile.print("\t\t\t");  
    Serial.print(GyY);
    Serial.print("\t\t");
//    myFile.print(gy);
//    myFile.print("\t\t");
    Serial.print(GyZ);
    Serial.print("\t\t");
//    myFile.println(gz);
//    myFile.print("\t\t");
    Serial.println();
//    myFile.println();


}
